const Message = require('../models/message.model');

class MessageController {
    // T·∫°o message m·ªõi cho m·ªôt phi√™n chat
    async createMessage(req, res) {
        try {
            const { session_id, content, role } = req.body;
            console.log("üì© D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:", req.body);
    
            // Ki·ªÉm tra n·∫øu thi·∫øu d·ªØ li·ªáu
            if (!session_id || !content || !role) {
                return res.status(400).json({ message: "Thi·∫øu d·ªØ li·ªáu b·∫Øt bu·ªôc" });
            }
    
            // Ki·ªÉm tra role h·ª£p l·ªá
            if (role !== "user" && role !== "assistant") {
                return res.status(400).json({ message: "Gi√° tr·ªã role kh√¥ng h·ª£p l·ªá!" });
            }
    
            // G·ªçi model ƒë·ªÉ l∆∞u v√†o DB
            const messageId = await Message.create(session_id, role, content);
            res.status(201).json({ message: "Message created successfully", messageId });
        } catch (error) {
            console.error("‚ùå L·ªói khi t·∫°o tin nh·∫Øn:", error);
            res.status(500).json({ message: error.message });
        }
    }    

    // L·∫•y th√¥ng tin message theo ID
    async getMessage(req, res) {
        try {
            const message = await Message.findBySessionId(req.params.id);
            if (!message) {
                return res.status(404).json({ message: 'Message not found' });
            }
            res.json(message);
        } catch (error) {
            res.status(500).json({ message: error.message });
        }
    }

    // l·∫•y tat ca message theo session_id
    async getMessagesBySession(req, res) {
        try {
            // L·∫•y session_id t·ª´ req.params
            const { session_id } = req.params;
            console.log("üîç L·∫•y t·∫•t c·∫£ message c·ªßa session:", session_id);
            if (!session_id) {
                return res.status(400).json({ message: "Thi·∫øu session_id" });
            }
            
            const messages = await Message.findBySessionId(session_id);
            res.json(messages);
        } catch (error) {
            res.status(500).json({ message: error.message });
        }
    }    

    // C·∫≠p nh·∫≠t n·ªôi dung message
    async updateMessage(req, res) {
        try {
            const { content } = req.body;
            const updateData = { content };

            const affectedRows = await Message.update(req.params.id, updateData);
            if (!affectedRows) {
                return res.status(404).json({ message: 'Message not found' });
            }
            res.json({ message: 'Message updated successfully' });
        } catch (error) {
            res.status(500).json({ message: error.message });
        }
    }

    // X√≥a message theo ID
    async deleteMessage(req, res) {
        try {
            const affectedRows = await Message.delete(req.params.id);
            if (!affectedRows) {
                return res.status(404).json({ message: 'Message not found' });
            }
            res.json({ message: 'Message deleted successfully' });
        } catch (error) {
            res.status(500).json({ message: error.message });
        }
    }
}

module.exports = new MessageController();
