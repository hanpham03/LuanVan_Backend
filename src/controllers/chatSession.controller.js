const ChatSessions = require('../models/chatSession.model');

class ChatSessionController {
    // T·∫°o phi√™n chat m·ªõi
    async createSession(req, res) {
        try {
            const { user_id, chatbot_id } = req.body;
            const sessionId = await ChatSessions.createSession(user_id, chatbot_id);
            res.status(201).json({ message: 'Chat session created successfully', sessionId });
        } catch (error) {
            res.status(500).json({ message: error.message });
        }
    }

    // L·∫•y th√¥ng tin phi√™n chat theo ID
    async getSession(req, res) {
        try {
            const session = await ChatSessions.getSessionById(req.params.id);
            if (!session) {
                return res.status(404).json({ message: 'Chat session not found' });
            }
            res.json(session);
        } catch (error) {
            res.status(500).json({ message: error.message });
        }
    }

    // L·∫•y t·∫•t c·∫£ phi√™n chat c·ªßa m·ªôt ng∆∞·ªùi d√πng
    async getSessionsByUser(req, res) {
        try {
            const sessions = await ChatSessions.getSessionsByUser(req.params.user_id);
            res.json(sessions);
        } catch (error) {
            res.status(500).json({ message: error.message });
        }
    }

    // K·∫øt th√∫c phi√™n chat (c·∫≠p nh·∫≠t end_time)
    async endSession(req, res) {
        try {
            await ChatSessions.endSession(req.params.id);
            res.json({ message: 'Chat session ended successfully' });
        } catch (error) {
            res.status(500).json({ message: error.message });
        }
    }

    // C·∫≠p nh·∫≠t th√¥ng tin phi√™n chat
    async updateSession(req, res) {
        try {
            const updateData = req.body; // D·ªØ li·ªáu c·∫≠p nh·∫≠t (vd: chatbot_id, start_time, end_time n·∫øu c·∫ßn)
            const affectedRows = await ChatSessions.updateSession(req.params.id, updateData);
            if (!affectedRows) {
                return res.status(404).json({ message: 'Chat session not found' });
            }
            res.json({ message: 'Chat session updated successfully' });
        } catch (error) {
            res.status(500).json({ message: error.message });
        }
    }

    // X√≥a phi√™n chat theo ID
    async deleteSession(req, res) {
        try {
            console.log("üî• Nh·∫≠n y√™u c·∫ßu x√≥a session:", req.params.id);
            const affectedRows = await ChatSessions.deleteSession(req.params.id);
            console.log("‚úÖ S·ªë d√≤ng b·ªã ·∫£nh h∆∞·ªüng:", affectedRows);
            
            if (!affectedRows) {
                return res.status(404).json({ message: "Chat session kh√¥ng t·ªìn t·∫°i" });
            }
    
            res.json({ message: "Chat session ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng" });
        } catch (error) {
            console.error("‚ùå L·ªói khi x√≥a session:", error);
            res.status(500).json({ message: error.message });
        }
    }
    
}

module.exports = new ChatSessionController();
